{"ast":null,"code":"import _createClass from\"/Users/austinly/Documents/nology/fire/fire-project/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"/Users/austinly/Documents/nology/fire/fire-project/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _toConsumableArray from\"/Users/austinly/Documents/nology/fire/fire-project/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/austinly/Documents/nology/fire/fire-project/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import taxTable from\"./static/tax.json\";import helpTable from\"./static/help.json\";import mlsTable from\"./static/mls.json\";/**\n * A function that calculates the annual income tax paid on a provided income amount\n * @param {number} taxableIncome Annual income after super and tax deductions, before any other deductions\n * @returns {TaxResult}\n */export var taxCalc=function taxCalc(taxableIncome){var table=arguments.length>1&&arguments[1]!==undefined?arguments[1]:taxTable;return function(){// fetch cleaned tax table array\nvar taxTable=table;// declare names for each column\nvar thresh=taxTable[0];var prcnt=taxTable[1];var base=taxTable[2];var total=0;var baseTax=0;var taxRate=0;// check if income greater than top threshold\n// if yes, calculate total tax = base + overthresh * percent\n// if not, continue\n// loop from top threshold\nfor(var i=thresh.length-1;i>=0;i--){if(taxableIncome>=thresh[i]){// if greater than threshold,\nbaseTax=base[i];taxRate=prcnt[i];total=base[i]+(taxableIncome-thresh[i]+1)*(prcnt[i]/100);break;}}return{baseTax:Math.round(baseTax),taxRate:taxRate,totalTax:Math.round(total),afterTax:Math.round(taxableIncome-total)};}();};// checked\n/**\n * A function that returns net income after super contributions, and the super contributions, based on the following parameters\n * @param {IncomeData} incomeSuperInput  {\n * \t\tincome: {number} Annual income before super contributions\n * \t\tincl: {boolean} True if super contributions to be deducted from provided income as standard, false if super contributions are paid on top of income\n * \t\trate: {number} Value 0-100 representing % super contribution rate\n * \t\tmax: {boolean} Set to true if super contributions are set to the allowed maximum concessional rate ($27,500)\n * }\n * @returns {SuperResult} Net income after super deducted, and Super contributions amount\n */export var superCalc=function superCalc(incomeSuperInput){// console.log(\"Arg for superCalc\", incomeSuperInput);\nvar _incomeSuperInput=_objectSpread({},incomeSuperInput),income=_incomeSuperInput.income,superInclusive=_incomeSuperInput.superInclusive,rate=_incomeSuperInput.rate,maxSuperContributions=_incomeSuperInput.maxSuperContributions;var totalSup;var incExclSup;var maxContrib=27500;if(maxSuperContributions){totalSup=maxContrib;if(superInclusive){incExclSup=income-maxContrib;}else{incExclSup=income-(maxContrib-income*(rate/100));}}else{if(superInclusive){// console.log(\"reaches here\", income, rate);\nincExclSup=income/(1+rate/100);// e.g. 90k income incl 10% super gives 90/1.1 = 81.8k excl super\ntotalSup=income-incExclSup;}else{// income doesn't include super\ntotalSup=income*(rate/100);incExclSup=income;}}var reportableContributions=totalSup-incExclSup*0.095;return{incomeAfterSuper:Math.round(incExclSup),superContribution:Math.round(totalSup),reportableContributions:reportableContributions>0?Math.round(reportableContributions):0};};// checked\n/**\n * A function that calculates the annual HELP repayment for a provided income amount\n * @param {number} incomeAssessable Annual income including super and fringe benefits, minus tax deductions\n * @returns {HelpResult} Amount of HELP repayment and Repayment rate %\n */export var totalHELP=function totalHELP(incomeAssessable){var hecsTable=_toConsumableArray(helpTable);var col1=hecsTable[0];var col2=hecsTable[1];var prcnt=0;// check income against threshold from highest threshold\n// if over threshold then set percentage\nfor(var i=col1.length-1;i>=0;i--){if(incomeAssessable>=col1[i]){prcnt=col2[i];break;}}return{helpRepayment:Math.round(incomeAssessable*prcnt/100),helpRepaymentRate:prcnt};};// checked\n/**\n * A function that calculates the total Medicare Levy Surcharge for a provided income amount\n * @param {number} income Annual income after deductions plus fringe benefits\n * @param {\"single\" | \"couple\"} cat Must be \"single\" or \"couple\"\n * @returns {Result} Amount of Medicare Levy Surcharge and % Rate\n */export var totalMLS=function totalMLS(incomeAssessable){var cat=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"single\";var table=_toConsumableArray(mlsTable);var col1;if(cat==\"single\"){col1=table[0];}if(cat==\"couple\"){col1=table[1];}var col2=table[2];var prcnt=0;for(var i=col1.length-1;i>=0;i--){if(incomeAssessable>=col1[i]){prcnt=col2[i];break;}}return{medicareLevySurcharge:Math.round(incomeAssessable*prcnt/100),mlsRate:prcnt};};// checked\n// ----- Private Funcs -----\n/**\n * A function that updates your HELP balance with repayments made during the year.\n * @param {number} current HELP balance at start of year period\n * @param {number} repay HELP repayment amount\n * @returns {{balance: number, additional: number}} HELP balance at end of year, and additional amount to add back to income if overpaid\n */var updateHelp=function updateHelp(current,repay){// assume 2% CPI increase\nvar bal=Math.round(current*1.02-repay);if(bal>0){return{balance:bal,additional:0};}else{return{balance:0,additional:-bal};}};// checked\n/**\n * A function that updates your yearly super balance with contributions made during the year.\n * This takes into account 15% contribution and investment gains tax.\n * @param {number} superBal Super balance at start of year period\n * @param {number} superContribution Amount of super contributed in the year period\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {number} New super balance at the end of the year period\n */var updateSuper=function updateSuper(superBal){var superContribution=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var growth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:7;return Math.round(superBal*(1+growth*0.85/100)+superContribution*0.85);};// checked\n/**\n * A function that updates your yearly investments balance with contributions made during the year.\n * Growth rate is assumed to be after any taxes.\n * @param {number} invBal Balance of index fund investments at the start of year period\n * @param {number} invContrib Amount contributed to investments during the year period\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {number} New balance of index fund investments at the end of the year period\n */var growInv=function growInv(invBal){var invContrib=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var growth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:7;// console.log(invBal, invContrib, growth);\nreturn{growth:Math.round(invBal*(growth/100)),invBal:Math.round(invBal*(1+growth/100)+invContrib)};};// checked\nexport var NetWorth=/*#__PURE__*/_createClass(function NetWorth(netIncome){var helpBalance=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var superBalance=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var investmentsBalance=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;_classCallCheck(this,NetWorth);this.netIncome=void 0;this.helpBalance=void 0;this.superBalance=void 0;this.investmentsBalance=void 0;this.netIncome=netIncome;this.helpBalance=helpBalance;this.superBalance=superBalance;this.investmentsBalance=investmentsBalance;});/**\n * Constructs an Income Object which is used as an argument for the taxTime function\n * @param {number} netIncome Annual income\n * @param {number} expenses Annual expenses\n * @param {number} deductions Tax deductions\n * @param {number} fringeBenefits Fringe benefits provided\n * @param {number} helpBal Current HELP balance\n * @param {number} superBal Current Super balance\n * @param {number} invBal Current Investments balance\n * @param {boolean} supIncl Whether super is included in annual income\n * @param {number} supRate Target super contribution rate as a 0-100%\n * @param {boolean} privateHospitalCover True if you have an MLS-exempt hospital cover policy\n */export var IncomeTaxProfile=/*#__PURE__*/_createClass(// Super inclusive\n// Super contribution rate\nfunction IncomeTaxProfile(netWorth,// income: number,\n// helpBal: number = 0,\n// superBal: number = 0,\n// invBal: number = 0,\nexpenses){var superInclusive=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var rate=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var deductions=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0;var fringeBenefits=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0;var privateHospitalCover=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;_classCallCheck(this,IncomeTaxProfile);this.netIncome=void 0;this.superInclusive=void 0;this.superContributionRate=void 0;this.expenses=void 0;this.deductions=void 0;this.fringeBenefits=void 0;this.helpBalance=void 0;this.superBalance=void 0;this.investmentsBalance=void 0;this.privateHospitalCover=void 0;// super(income, helpBal, superBal, invBal);\nthis.netIncome=netWorth.netIncome;this.expenses=expenses;this.superInclusive=superInclusive;this.superContributionRate=rate;this.deductions=deductions;this.fringeBenefits=fringeBenefits;this.helpBalance=netWorth.helpBalance;this.superBalance=netWorth.superBalance;this.investmentsBalance=netWorth.investmentsBalance;this.privateHospitalCover=privateHospitalCover;});/**\n * A function that calculates your net income after all super, tax, HELP, medicare, MLS payments, and determines updated HELP, Super and Investment balances after payments/contributions\n * @param {IncomeTaxProfile} incomeObj Yearly income object with the properties of an IncomeObject\n * @param {boolean} maxSuper\n * @param {boolean} drawingPhase Indicates whether investments should be drawn down\n * @param {boolean} paySup Indicates whether super should still be paid from income\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {NetIncome} Net Income object (net income, HELP bal, Super bal, Investments bal)\n *\n */IncomeTaxProfile.create=function(income,expenses){return new IncomeTaxProfile(new NetWorth(income),expenses);};IncomeTaxProfile.copy=function(instance){return new IncomeTaxProfile({netIncome:instance.netIncome,helpBalance:instance.helpBalance,investmentsBalance:instance.investmentsBalance,superBalance:instance.superBalance},instance.expenses,instance.superInclusive,instance.superContributionRate,instance.deductions,instance.fringeBenefits,instance.privateHospitalCover);};export var taxTime=function taxTime(incomeObj){var maxSuper=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var growth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var drawingPhase=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var paySup=arguments.length>4&&arguments[4]!==undefined?arguments[4]:true;// Income after deductions\n// console.log(\"Income Obj: \", incomeObj);\nvar income=incomeObj.netIncome;// console.log(income);\nvar supCont=0;var repSup=0;// Super contribution and income less super contribution\nif(paySup){var netIncome=incomeObj.netIncome,superInclusive=incomeObj.superInclusive,superContributionRate=incomeObj.superContributionRate;var _superCalc=superCalc({income:netIncome,superInclusive:superInclusive,rate:superContributionRate,maxSuperContributions:maxSuper}),incomeAfterSuper=_superCalc.incomeAfterSuper,superContribution=_superCalc.superContribution,reportableContributions=_superCalc.reportableContributions;income=incomeAfterSuper;// console.log(income);\nsupCont=superContribution;repSup=reportableContributions;}// console.log(\n// \t`Income after deductions and super is ${income}, Super contribution is ${supCont}`,\n// );\n// Update super balance\n// console.log(`Previous super balance is ${incomeObj.superBal}`);\nvar newSuper=updateSuper(incomeObj.superBalance,supCont,growth);// console.log(`New super balance is ${newSuper}`);\n// console.log(income);\n//Add investment earnings to income\nvar invBalGrowth=growInv(incomeObj.investmentsBalance,0,growth).growth;// if not drawing from investments, taxable income is regular income + growth on investments\n// if drawing from investments, and growth is greater than income required, then total taxable income will be solely from growth\n// if growth is not greater than income, then taxable income will be the target income generated from liquidating investments\nincome=!drawingPhase?income+invBalGrowth:invBalGrowth>incomeObj.netIncome?invBalGrowth:income;// console.log(income);\n// determine hecs repayment and balance\nincome-=incomeObj.deductions;// console.log(\n//     \"Assessable income\",\n//     income,\n//     repSup,\n//     incomeObj.fringeBenefits,\n//     income + repSup + incomeObj.fringeBenefits,\n// );\nvar help=totalHELP(income+repSup+incomeObj.fringeBenefits);var helpRepayment=help.helpRepayment;var helpRepaymentRate=help.helpRepaymentRate;var helpNew=updateHelp(incomeObj.helpBalance,helpRepayment);var helpBalance=helpNew.balance;var helpOver=helpNew.additional;// medicare levy\n// low-income - medicare levy is 10% of amount over exempt threshold 23,266, above 29,033 is 2% of income\nvar medicare=income<23226?0:income<29033?Math.round((income-23266)*0.1):Math.round(0.02*income);// income tax\nvar taxResult=taxCalc(income);var tax=taxResult.totalTax;// medicare levy surcharge\nvar mlsRepay=0;var mlsRate=0;if(income>=90000&&!incomeObj.privateHospitalCover){var mls=totalMLS(income+incomeObj.fringeBenefits,\"single\");mlsRepay=mls.medicareLevySurcharge;mlsRate=mls.mlsRate;}// Net income after ATO\nincome=Math.round(income-tax-helpRepayment+helpOver-medicare-mlsRepay);// console.log(\n//     \"Total Tax and Payments:\",\n//     tax + helpRepayment - helpOver + medicare + mlsRepay,\n//     \"\\nEach:\",\n//     tax,\n//     helpRepayment - helpOver,\n//     medicare,\n//     mlsRepay,\n// );\n// \tconsole.log(\n// \t\t`Medicare Levy: ${medicare}\n// Tax: ${tax}\n// Medicare Levy Surcharge: ${mls}\n// Net Income: ${income}`,\n// \t);\n// are we adding to investments or drawing income from investments?\nvar invContrib=0;if(!drawingPhase){invContrib=income-incomeObj.expenses;}else{invContrib=-(tax+helpRepayment-helpOver+medicare+mlsRepay+incomeObj.expenses);//when in drawing phase, income is set to a fixed pre-tax number to cover expenses after tax, taken from investments\n}// update investments\nvar newInv=growInv(incomeObj.investmentsBalance,invContrib,growth).invBal;// \tconsole.log(\n// \t\t`Investments: ${invContrib}\n// New Investment Balance: ${newInv}`,\n// \t);\nreturn{netIncome:income,superContribution:supCont,helpRepayment:helpRepayment-helpOver,helpRepaymentRate:helpRepaymentRate,medicareLevy:medicare,medicareLevySurcharge:mlsRepay,mlsRate:mlsRate,availableToInvest:invContrib,helpBalance:helpBalance,superBalance:newSuper,investmentsBalance:newInv,reportableContributions:repSup,baseTax:taxResult.baseTax,taxRate:taxResult.taxRate,totalTax:tax};};// checked\n/**\n * A function that gives you the pre-tax income for a corresponding after-tax amount.\n * @param {number} targetIncome Desired post-tax income amount (usually to cover expenses)\n * @returns {number} The amount of pre-tax income required to earn the after tax target amount.\n */export var preTaxTarget=function preTaxTarget(targetIncome){var testAmt=2*targetIncome;var increment=targetIncome*0.5;var tester=IncomeTaxProfile.create(testAmt,targetIncome);while(true){var postTax=Math.round(taxTime(tester).netIncome);if(postTax!==targetIncome){if(postTax>targetIncome){tester.netIncome=Math.round(tester.netIncome-increment);increment*=0.5;}else{tester.netIncome=Math.round(tester.netIncome+increment);}}else{break;}}// console.log(\"Pre-tax Income required for FIRE: \", tester);\nreturn tester.netIncome;};// checked\n/**\n * A function that gives you your goal FIRE number based on the 4% rule\n * @param {number} income Target annual income\n * @returns {number} Total investments required to draw annual income based on 4% rule\n */export var fireNumber=function fireNumber(income){return Math.round(income/0.04);};// checked\n/**\n * A function that checks if your investment balance is sufficient to drawdown your target income until retirement age (60)\n * @param {number} balance Investment balance being tested\n * @param {number} growth Assumed growth rate of investments from 0-1\n * @param {number} target Target income to draw down\n * @param {number} currentAge Age at which this balance is current\n * @returns {boolean} Whether balance is sufficient to sustain drawdown until 60\n */export var invTargetReached=function invTargetReached(balance,growth,target,currentAge){var age=currentAge;var invBal=balance;while(age<=60){age+=1;var invGrowth=growInv(invBal,0,growth).growth;var drawing=invGrowth>target?invGrowth:target;invBal=(invBal-drawing)*(1+growth/100);// if at any point before reaching age 60, invBal reaches <0, then balance is insufficient\nif(invBal<0){return false;}}// if by age 60 balance is > 0, balance is sufficient\nreturn true;};// checked\n/**\n * A function to check at what age your Super will reach your FIRE number without requiring further contributions\n * @param {number} balance Current Super balance\n * @param {number} expenses Estimated annual expenses once FIRE'd\n * @param {number} contrib Annual super contributions until ceased\n * @param {number} age Current age\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {{ age: number, balance: number, fireNumber: number, balBy60: number}} Age, Super Balance, once sufficient to reach FIRE number with Super balance by 60 without further contributions\n */export var superTarget=function superTarget(balance,expenses,contrib,age){var growth=arguments.length>4&&arguments[4]!==undefined?arguments[4]:7;var year=0;var target=fireNumber(expenses);// Balance by the age of 60 without further contributions\nvar retireBal=balance*Math.pow((1+growth/100)*0.85,60-age);// If super balance is not sufficient to reach target, increment by a year and contribute to super\nwhile(retireBal<target){year+=1;age+=1;balance=updateSuper(balance,contrib,growth);retireBal=balance*Math.pow(1+growth*0.85,60-age);}return{age:age,balance:balance,fireNumber:target,balBy60:retireBal};};// checked\nexport var compoundInterest=function compoundInterest(principal,rate){var contrib=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var period=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;var result=principal*Math.pow(1+rate/100,period);var contribs=contrib*(Math.pow(1+rate/100,period)-1)/(rate/100);return result+contribs;};/**\n * A function that returns your estimated years to reach FIRE and age based on current income/expenses/net worth.\n * @param {IncomeObject} incomeObj IncomeObject that contains your predictive properties for income etc.\n * @param {number} age Age at the start of prediction\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {{years: number, age: number, incomeObj: IncomeObject}} Years to FIRE and Age at FIRE, along with IncomeObject at 60\n */export var timeToFIRE=function timeToFIRE(incomeObj,age){var growth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:7;// console.log(\"---------TTF IncomeObj passed: \", incomeObj); //change to income occurs between logs here\nvar reqIncome=preTaxTarget(incomeObj.expenses);// console.log(\"----After PTT:\", incomeObj);\nvar fireNum=fireNumber(reqIncome);var startAge=age;var year=0;// console.log(\"----Before Copy:\", incomeObj);\nvar yearEnd=new IncomeTaxProfile(new NetWorth(incomeObj.netIncome,incomeObj.helpBalance,incomeObj.superBalance,incomeObj.investmentsBalance),incomeObj.expenses,incomeObj.superInclusive,incomeObj.superContributionRate,incomeObj.deductions,incomeObj.fringeBenefits,incomeObj.privateHospitalCover);// console.log(\"-------After Copy:\", yearEnd);\nwhile(!invTargetReached(yearEnd.investmentsBalance,growth,reqIncome,age)){year+=1;age+=1;console.log(\"Before TaxTime:\",yearEnd);var netPosition=taxTime(yearEnd,false,growth,false,true);yearEnd.helpBalance=netPosition.helpBalance;yearEnd.investmentsBalance=netPosition.investmentsBalance;yearEnd.superBalance=netPosition.superBalance;// incomeObj.helpBal = yearEnd.helpBal;\n// incomeObj.helpBal = yearEnd.superBal;\n// incomeObj.helpBal = yearEnd.invBal;\n// console.log(\"----INVESTMENTS:\", yearEnd.investmentsBalance);\n//         console.log(\n//             `Age: ${age}\n// Investments Balance: ${yearEnd.investmentsBalance}\n// Super Balance: ${yearEnd.superBalance}\n// HECS Balance: ${yearEnd.helpBalance}\n// Invested this year: ${netPosition.availableToInvest}\n// `,\n//         );\n}//     console.log(`Investments will reach target balance at age ${age}.\n// Start max super contributions.`);\nvar superFIRE=superTarget(yearEnd.superBalance,yearEnd.expenses,27500,age,growth);while(age<superFIRE.age+1){year+=1;age+=1;var _netPosition=taxTime(yearEnd,true,growth,false,true);yearEnd.helpBalance=_netPosition.helpBalance;yearEnd.superBalance=_netPosition.superBalance;yearEnd.investmentsBalance=_netPosition.investmentsBalance;//         console.log(\n//             `Age: ${age}\n// Investments Balance: ${yearEnd.investmentsBalance}\n// Super Balance: ${yearEnd.superBalance}\n// HECS Balance: ${yearEnd.helpBalance}\n// Invested this year: ${netPosition.availableToInvest}\n// `,\n//         );\n}var fireYears=year;// console.log(`You will reach FIRE in ${year} years!`);\nyearEnd.netIncome=reqIncome;yearEnd.deductions=0;yearEnd.fringeBenefits=0;yearEnd.superInclusive=false;yearEnd.superContributionRate=0;while(age<60){year+=1;age+=1;var _netPosition2=taxTime(yearEnd,false,growth,true,false);yearEnd.helpBalance=_netPosition2.helpBalance;yearEnd.superBalance=_netPosition2.superBalance;yearEnd.investmentsBalance=_netPosition2.investmentsBalance;//         console.log(\n//             `Age: ${age}\n// Investments Balance: ${yearEnd.investmentsBalance}\n// Super Balance: ${yearEnd.superBalance}\n// HECS Balance: ${yearEnd.helpBalance}\n// Invested this year: ${netPosition.availableToInvest}\n// `,\n//         );\n//         console.log(\n//             `Final Net Worth: ${\n//                 yearEnd.investmentsBalance + yearEnd.superBalance\n//             }`,\n//         );\n}return{yearsToFire:fireYears,ageAtFire:startAge+fireYears,result:yearEnd};};","map":{"version":3,"names":["taxTable","helpTable","mlsTable","taxCalc","taxableIncome","table","thresh","prcnt","base","total","baseTax","taxRate","i","length","Math","round","totalTax","afterTax","superCalc","incomeSuperInput","income","superInclusive","rate","maxSuperContributions","totalSup","incExclSup","maxContrib","reportableContributions","incomeAfterSuper","superContribution","totalHELP","incomeAssessable","hecsTable","col1","col2","helpRepayment","helpRepaymentRate","totalMLS","cat","medicareLevySurcharge","mlsRate","updateHelp","current","repay","bal","balance","additional","updateSuper","superBal","growth","growInv","invBal","invContrib","NetWorth","netIncome","helpBalance","superBalance","investmentsBalance","IncomeTaxProfile","netWorth","expenses","deductions","fringeBenefits","privateHospitalCover","superContributionRate","create","copy","instance","taxTime","incomeObj","maxSuper","drawingPhase","paySup","supCont","repSup","newSuper","invBalGrowth","help","helpNew","helpOver","medicare","taxResult","tax","mlsRepay","mls","newInv","medicareLevy","availableToInvest","preTaxTarget","targetIncome","testAmt","increment","tester","postTax","fireNumber","invTargetReached","target","currentAge","age","invGrowth","drawing","superTarget","contrib","year","retireBal","pow","balBy60","compoundInterest","principal","period","result","contribs","timeToFIRE","reqIncome","fireNum","startAge","yearEnd","console","log","netPosition","superFIRE","fireYears","yearsToFire","ageAtFire"],"sources":["/Users/austinly/Documents/nology/fire/fire-project/src/services/calcTS-mod.ts"],"sourcesContent":["import taxTable from \"./static/tax.json\";\nimport helpTable from \"./static/help.json\";\nimport mlsTable from \"./static/mls.json\";\nimport { RateReview } from \"@mui/icons-material\";\n\nexport interface IncomeData {\n    income: number;\n    superInclusive: boolean;\n    rate: number;\n    maxSuperContributions?: boolean;\n}\n\nexport interface TaxResult {\n    baseTax: number;\n    taxRate: number;\n    totalTax: number;\n    afterTax?: number;\n}\n\nexport interface SuperResult {\n    superContribution: number;\n    reportableContributions: number;\n    incomeAfterSuper?: number;\n}\n\nexport interface HelpResult {\n    helpRepayment: number;\n    helpRepaymentRate: number;\n}\n\nexport interface MlsResult {\n    medicareLevySurcharge: number;\n    mlsRate: number;\n}\n\n/**\n * A function that calculates the annual income tax paid on a provided income amount\n * @param {number} taxableIncome Annual income after super and tax deductions, before any other deductions\n * @returns {TaxResult}\n */\nexport const taxCalc = (\n    taxableIncome: number,\n    table: number[][] = taxTable,\n): TaxResult => {\n    // fetch cleaned tax table array\n    const taxTable = table;\n\n    // declare names for each column\n    let thresh = taxTable[0];\n    let prcnt = taxTable[1];\n    let base = taxTable[2];\n\n    let total = 0;\n    let baseTax = 0;\n    let taxRate = 0;\n\n    // check if income greater than top threshold\n    // if yes, calculate total tax = base + overthresh * percent\n    // if not, continue\n\n    // loop from top threshold\n    for (let i = thresh.length - 1; i >= 0; i--) {\n        if (taxableIncome >= thresh[i]) {\n            // if greater than threshold,\n            baseTax = base[i];\n            taxRate = prcnt[i];\n            total =\n                base[i] + (taxableIncome - thresh[i] + 1) * (prcnt[i] / 100);\n            break;\n        }\n    }\n\n    return {\n        baseTax: Math.round(baseTax),\n        taxRate: taxRate,\n        totalTax: Math.round(total),\n        afterTax: Math.round(taxableIncome - total),\n    };\n}; // checked\n\n/**\n * A function that returns net income after super contributions, and the super contributions, based on the following parameters\n * @param {IncomeData} incomeSuperInput  {\n * \t\tincome: {number} Annual income before super contributions\n * \t\tincl: {boolean} True if super contributions to be deducted from provided income as standard, false if super contributions are paid on top of income\n * \t\trate: {number} Value 0-100 representing % super contribution rate\n * \t\tmax: {boolean} Set to true if super contributions are set to the allowed maximum concessional rate ($27,500)\n * }\n * @returns {SuperResult} Net income after super deducted, and Super contributions amount\n */\nexport const superCalc = (incomeSuperInput: IncomeData): SuperResult => {\n    // console.log(\"Arg for superCalc\", incomeSuperInput);\n    const { income, superInclusive, rate, maxSuperContributions } = {\n        ...incomeSuperInput,\n    };\n\n    let totalSup: number;\n    let incExclSup: number;\n    const maxContrib = 27500;\n\n    if (maxSuperContributions) {\n        totalSup = maxContrib;\n        if (superInclusive) {\n            incExclSup = income - maxContrib;\n        } else {\n            incExclSup = income - (maxContrib - income * (rate / 100));\n        }\n    } else {\n        if (superInclusive) {\n            // console.log(\"reaches here\", income, rate);\n            incExclSup = income / (1 + rate / 100); // e.g. 90k income incl 10% super gives 90/1.1 = 81.8k excl super\n            totalSup = income - incExclSup;\n        } else {\n            // income doesn't include super\n            totalSup = income * (rate / 100);\n            incExclSup = income;\n        }\n    }\n\n    const reportableContributions = totalSup - incExclSup * 0.095;\n\n    return {\n        incomeAfterSuper: Math.round(incExclSup),\n        superContribution: Math.round(totalSup),\n        reportableContributions:\n            reportableContributions > 0\n                ? Math.round(reportableContributions)\n                : 0,\n    };\n}; // checked\n\n/**\n * A function that calculates the annual HELP repayment for a provided income amount\n * @param {number} incomeAssessable Annual income including super and fringe benefits, minus tax deductions\n * @returns {HelpResult} Amount of HELP repayment and Repayment rate %\n */\nexport const totalHELP = (incomeAssessable: number): HelpResult => {\n    const hecsTable = [...helpTable];\n    const col1 = hecsTable[0];\n    const col2 = hecsTable[1];\n\n    let prcnt = 0;\n\n    // check income against threshold from highest threshold\n    // if over threshold then set percentage\n    for (let i = col1.length - 1; i >= 0; i--) {\n        if (incomeAssessable >= col1[i]) {\n            prcnt = col2[i];\n            break;\n        }\n    }\n\n    return {\n        helpRepayment: Math.round((incomeAssessable * prcnt) / 100),\n        helpRepaymentRate: prcnt,\n    };\n}; // checked\n\n/**\n * A function that calculates the total Medicare Levy Surcharge for a provided income amount\n * @param {number} income Annual income after deductions plus fringe benefits\n * @param {\"single\" | \"couple\"} cat Must be \"single\" or \"couple\"\n * @returns {Result} Amount of Medicare Levy Surcharge and % Rate\n */\nexport const totalMLS = (\n    incomeAssessable: number,\n    cat: \"single\" | \"couple\" = \"single\",\n): MlsResult => {\n    const table = [...mlsTable];\n    let col1;\n    if (cat == \"single\") {\n        col1 = table[0];\n    }\n    if (cat == \"couple\") {\n        col1 = table[1];\n    }\n    let col2 = table[2];\n\n    let prcnt = 0;\n\n    for (let i = col1.length - 1; i >= 0; i--) {\n        if (incomeAssessable >= col1[i]) {\n            prcnt = col2[i];\n            break;\n        }\n    }\n\n    return {\n        medicareLevySurcharge: Math.round((incomeAssessable * prcnt) / 100),\n        mlsRate: prcnt,\n    };\n}; // checked\n\n// ----- Private Funcs -----\n\ninterface NewHelp {\n    balance: number;\n    additional: number;\n}\n\n/**\n * A function that updates your HELP balance with repayments made during the year.\n * @param {number} current HELP balance at start of year period\n * @param {number} repay HELP repayment amount\n * @returns {{balance: number, additional: number}} HELP balance at end of year, and additional amount to add back to income if overpaid\n */\nconst updateHelp = (current: number, repay: number): NewHelp => {\n    // assume 2% CPI increase\n    let bal = Math.round(current * 1.02 - repay);\n\n    if (bal > 0) {\n        return {\n            balance: bal,\n            additional: 0,\n        };\n    } else {\n        return {\n            balance: 0,\n            additional: -bal,\n        };\n    }\n}; // checked\n\n/**\n * A function that updates your yearly super balance with contributions made during the year.\n * This takes into account 15% contribution and investment gains tax.\n * @param {number} superBal Super balance at start of year period\n * @param {number} superContribution Amount of super contributed in the year period\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {number} New super balance at the end of the year period\n */\n\nconst updateSuper = (\n    superBal: number,\n    superContribution: number = 0,\n    growth: number = 7,\n): number => {\n    return Math.round(\n        superBal * (1 + (growth * 0.85) / 100) + superContribution * 0.85,\n    );\n}; // checked\n\ninterface InvResult {\n    growth: number;\n    invBal: number;\n}\n\n/**\n * A function that updates your yearly investments balance with contributions made during the year.\n * Growth rate is assumed to be after any taxes.\n * @param {number} invBal Balance of index fund investments at the start of year period\n * @param {number} invContrib Amount contributed to investments during the year period\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {number} New balance of index fund investments at the end of the year period\n */\nconst growInv = (\n    invBal: number,\n    invContrib: number = 0,\n    growth: number = 7,\n): InvResult => {\n    // console.log(invBal, invContrib, growth);\n    return {\n        growth: Math.round(invBal * (growth / 100)),\n        invBal: Math.round(invBal * (1 + growth / 100) + invContrib),\n    };\n}; // checked\n\nexport class NetWorth {\n    netIncome: number;\n    helpBalance: number;\n    superBalance: number;\n    investmentsBalance: number;\n\n    constructor(\n        netIncome: number,\n        helpBalance: number = 0,\n        superBalance: number = 0,\n        investmentsBalance: number = 0,\n    ) {\n        this.netIncome = netIncome;\n        this.helpBalance = helpBalance;\n        this.superBalance = superBalance;\n        this.investmentsBalance = investmentsBalance;\n    }\n}\n\n/**\n * Constructs an Income Object which is used as an argument for the taxTime function\n * @param {number} netIncome Annual income\n * @param {number} expenses Annual expenses\n * @param {number} deductions Tax deductions\n * @param {number} fringeBenefits Fringe benefits provided\n * @param {number} helpBal Current HELP balance\n * @param {number} superBal Current Super balance\n * @param {number} invBal Current Investments balance\n * @param {boolean} supIncl Whether super is included in annual income\n * @param {number} supRate Target super contribution rate as a 0-100%\n * @param {boolean} privateHospitalCover True if you have an MLS-exempt hospital cover policy\n */\nexport class IncomeTaxProfile implements NetWorth {\n    netIncome: number;\n    superInclusive: boolean; // Super inclusive\n    superContributionRate: number; // Super contribution rate\n    expenses: number;\n    deductions: number;\n    fringeBenefits: number;\n    helpBalance: number;\n    superBalance: number;\n    investmentsBalance: number;\n    privateHospitalCover: boolean;\n\n    constructor(\n        netWorth: NetWorth,\n        // income: number,\n        // helpBal: number = 0,\n        // superBal: number = 0,\n        // invBal: number = 0,\n\n        expenses: number,\n        superInclusive: boolean = false,\n        rate: number = 0,\n        deductions: number = 0,\n        fringeBenefits: number = 0,\n        privateHospitalCover: boolean = false,\n    ) {\n        // super(income, helpBal, superBal, invBal);\n        this.netIncome = netWorth.netIncome;\n        this.expenses = expenses;\n        this.superInclusive = superInclusive;\n        this.superContributionRate = rate;\n        this.deductions = deductions;\n        this.fringeBenefits = fringeBenefits;\n        this.helpBalance = netWorth.helpBalance;\n        this.superBalance = netWorth.superBalance;\n        this.investmentsBalance = netWorth.investmentsBalance;\n        this.privateHospitalCover = privateHospitalCover;\n    }\n\n    static create = (income: number, expenses: number): IncomeTaxProfile => {\n        return new IncomeTaxProfile(new NetWorth(income), expenses);\n    };\n\n    static copy = (instance: IncomeTaxProfile): IncomeTaxProfile => {\n        return new IncomeTaxProfile(\n            {\n                netIncome: instance.netIncome,\n                helpBalance: instance.helpBalance,\n                investmentsBalance: instance.investmentsBalance,\n                superBalance: instance.superBalance,\n            },\n            instance.expenses,\n            instance.superInclusive,\n            instance.superContributionRate,\n            instance.deductions,\n            instance.fringeBenefits,\n            instance.privateHospitalCover,\n        );\n    };\n}\n\n/**\n * A function that calculates your net income after all super, tax, HELP, medicare, MLS payments, and determines updated HELP, Super and Investment balances after payments/contributions\n * @param {IncomeTaxProfile} incomeObj Yearly income object with the properties of an IncomeObject\n * @param {boolean} maxSuper\n * @param {boolean} drawingPhase Indicates whether investments should be drawn down\n * @param {boolean} paySup Indicates whether super should still be paid from income\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {NetIncome} Net Income object (net income, HELP bal, Super bal, Investments bal)\n *\n */\nexport const taxTime = (\n    incomeObj: IncomeTaxProfile,\n    maxSuper: boolean = false,\n    growth: number = 0,\n    drawingPhase: boolean = false,\n    paySup: boolean = true,\n): NetIncome => {\n    // Income after deductions\n    // console.log(\"Income Obj: \", incomeObj);\n    let income = incomeObj.netIncome;\n    // console.log(income);\n    let supCont = 0;\n    let repSup = 0;\n\n    // Super contribution and income less super contribution\n    if (paySup) {\n        const { netIncome, superInclusive, superContributionRate } = incomeObj;\n        const { incomeAfterSuper, superContribution, reportableContributions } =\n            superCalc({\n                income: netIncome,\n                superInclusive: superInclusive,\n                rate: superContributionRate,\n                maxSuperContributions: maxSuper,\n            });\n        income = incomeAfterSuper;\n        // console.log(income);\n        supCont = superContribution;\n        repSup = reportableContributions;\n    }\n    // console.log(\n    // \t`Income after deductions and super is ${income}, Super contribution is ${supCont}`,\n    // );\n\n    // Update super balance\n    // console.log(`Previous super balance is ${incomeObj.superBal}`);\n    let newSuper = updateSuper(incomeObj.superBalance, supCont, growth);\n    // console.log(`New super balance is ${newSuper}`);\n    // console.log(income);\n    //Add investment earnings to income\n\n    const invBalGrowth = growInv(\n        incomeObj.investmentsBalance,\n        0,\n        growth,\n    ).growth;\n\n    // if not drawing from investments, taxable income is regular income + growth on investments\n    // if drawing from investments, and growth is greater than income required, then total taxable income will be solely from growth\n    // if growth is not greater than income, then taxable income will be the target income generated from liquidating investments\n    income = !drawingPhase\n        ? income + invBalGrowth\n        : invBalGrowth > incomeObj.netIncome\n        ? invBalGrowth\n        : income;\n    // console.log(income);\n    // determine hecs repayment and balance\n\n    income -= incomeObj.deductions;\n    // console.log(\n    //     \"Assessable income\",\n    //     income,\n    //     repSup,\n    //     incomeObj.fringeBenefits,\n    //     income + repSup + incomeObj.fringeBenefits,\n    // );\n    const help = totalHELP(income + repSup + incomeObj.fringeBenefits);\n    const helpRepayment = help.helpRepayment;\n    const helpRepaymentRate = help.helpRepaymentRate;\n    const helpNew = updateHelp(incomeObj.helpBalance, helpRepayment);\n    const helpBalance = helpNew.balance;\n    const helpOver = helpNew.additional;\n\n    // medicare levy\n    // low-income - medicare levy is 10% of amount over exempt threshold 23,266, above 29,033 is 2% of income\n    const medicare =\n        income < 23226\n            ? 0\n            : income < 29033\n            ? Math.round((income - 23266) * 0.1)\n            : Math.round(0.02 * income);\n\n    // income tax\n    const taxResult = taxCalc(income);\n    const tax = taxResult.totalTax;\n\n    // medicare levy surcharge\n    let mlsRepay = 0;\n    let mlsRate = 0;\n    if (income >= 90000 && !incomeObj.privateHospitalCover) {\n        const mls = totalMLS(income + incomeObj.fringeBenefits, \"single\");\n        mlsRepay = mls.medicareLevySurcharge;\n        mlsRate = mls.mlsRate;\n    }\n\n    // Net income after ATO\n    income = Math.round(\n        income - tax - helpRepayment + helpOver - medicare - mlsRepay,\n    );\n    // console.log(\n    //     \"Total Tax and Payments:\",\n    //     tax + helpRepayment - helpOver + medicare + mlsRepay,\n    //     \"\\nEach:\",\n    //     tax,\n    //     helpRepayment - helpOver,\n    //     medicare,\n    //     mlsRepay,\n    // );\n    // \tconsole.log(\n    // \t\t`Medicare Levy: ${medicare}\n    // Tax: ${tax}\n    // Medicare Levy Surcharge: ${mls}\n    // Net Income: ${income}`,\n    // \t);\n\n    // are we adding to investments or drawing income from investments?\n    let invContrib = 0;\n    if (!drawingPhase) {\n        invContrib = income - incomeObj.expenses;\n    } else {\n        invContrib = -(\n            tax +\n            helpRepayment -\n            helpOver +\n            medicare +\n            mlsRepay +\n            incomeObj.expenses\n        );\n        //when in drawing phase, income is set to a fixed pre-tax number to cover expenses after tax, taken from investments\n    }\n\n    // update investments\n    const newInv = growInv(\n        incomeObj.investmentsBalance,\n        invContrib,\n        growth,\n    ).invBal;\n\n    // \tconsole.log(\n    // \t\t`Investments: ${invContrib}\n    // New Investment Balance: ${newInv}`,\n    // \t);\n\n    return {\n        netIncome: income,\n        superContribution: supCont,\n        helpRepayment: helpRepayment - helpOver,\n        helpRepaymentRate: helpRepaymentRate,\n        medicareLevy: medicare,\n        medicareLevySurcharge: mlsRepay,\n        mlsRate: mlsRate,\n        availableToInvest: invContrib,\n        helpBalance: helpBalance,\n        superBalance: newSuper,\n        investmentsBalance: newInv,\n\n        reportableContributions: repSup,\n        baseTax: taxResult.baseTax,\n        taxRate: taxResult.taxRate,\n        totalTax: tax,\n    };\n}; // checked\n\nexport interface NetIncome\n    extends NetWorth,\n        TaxResult,\n        SuperResult,\n        HelpResult,\n        MlsResult {\n    superContribution: number;\n    availableToInvest: number;\n    medicareLevy: number;\n}\n\n/**\n * A function that gives you the pre-tax income for a corresponding after-tax amount.\n * @param {number} targetIncome Desired post-tax income amount (usually to cover expenses)\n * @returns {number} The amount of pre-tax income required to earn the after tax target amount.\n */\nexport const preTaxTarget = (targetIncome: number): number => {\n    let testAmt = 2 * targetIncome;\n    let increment = targetIncome * 0.5;\n    const tester = IncomeTaxProfile.create(testAmt, targetIncome);\n\n    while (true) {\n        let postTax = Math.round(taxTime(tester).netIncome);\n\n        if (postTax !== targetIncome) {\n            if (postTax > targetIncome) {\n                tester.netIncome = Math.round(tester.netIncome - increment);\n                increment *= 0.5;\n            } else {\n                tester.netIncome = Math.round(tester.netIncome + increment);\n            }\n        } else {\n            break;\n        }\n    }\n    // console.log(\"Pre-tax Income required for FIRE: \", tester);\n    return tester.netIncome;\n}; // checked\n\n/**\n * A function that gives you your goal FIRE number based on the 4% rule\n * @param {number} income Target annual income\n * @returns {number} Total investments required to draw annual income based on 4% rule\n */\nexport const fireNumber = (income: number): number => {\n    return Math.round(income / 0.04);\n}; // checked\n\n/**\n * A function that checks if your investment balance is sufficient to drawdown your target income until retirement age (60)\n * @param {number} balance Investment balance being tested\n * @param {number} growth Assumed growth rate of investments from 0-1\n * @param {number} target Target income to draw down\n * @param {number} currentAge Age at which this balance is current\n * @returns {boolean} Whether balance is sufficient to sustain drawdown until 60\n */\nexport const invTargetReached = (\n    balance: number,\n    growth: number,\n    target: number,\n    currentAge: number,\n): boolean => {\n    let age = currentAge;\n    let invBal = balance;\n\n    while (age <= 60) {\n        age += 1;\n        const invGrowth = growInv(invBal, 0, growth).growth;\n        const drawing = invGrowth > target ? invGrowth : target;\n        invBal = (invBal - drawing) * (1 + growth / 100);\n\n        // if at any point before reaching age 60, invBal reaches <0, then balance is insufficient\n        if (invBal < 0) {\n            return false;\n        }\n    }\n\n    // if by age 60 balance is > 0, balance is sufficient\n    return true;\n}; // checked\n\n/**\n * A function to check at what age your Super will reach your FIRE number without requiring further contributions\n * @param {number} balance Current Super balance\n * @param {number} expenses Estimated annual expenses once FIRE'd\n * @param {number} contrib Annual super contributions until ceased\n * @param {number} age Current age\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {{ age: number, balance: number, fireNumber: number, balBy60: number}} Age, Super Balance, once sufficient to reach FIRE number with Super balance by 60 without further contributions\n */\nexport const superTarget = (\n    balance: number,\n    expenses: number,\n    contrib: number,\n    age: number,\n    growth = 7,\n) => {\n    let year = 0;\n    const target = fireNumber(expenses);\n\n    // Balance by the age of 60 without further contributions\n    let retireBal = balance * Math.pow((1 + growth / 100) * 0.85, 60 - age);\n\n    // If super balance is not sufficient to reach target, increment by a year and contribute to super\n    while (retireBal < target) {\n        year += 1;\n        age += 1;\n        balance = updateSuper(balance, contrib, growth);\n        retireBal = balance * Math.pow(1 + growth * 0.85, 60 - age);\n    }\n\n    return {\n        age: age,\n        balance: balance,\n        fireNumber: target,\n        balBy60: retireBal,\n    };\n}; // checked\n\nexport const compoundInterest = (\n    principal: number,\n    rate: number,\n    contrib: number = 0,\n    period: number = 1,\n): number => {\n    const result = principal * (1 + rate / 100) ** period;\n    const contribs =\n        (contrib * ((1 + rate / 100) ** period - 1)) / (rate / 100);\n    return result + contribs;\n};\n\n/**\n * A function that returns your estimated years to reach FIRE and age based on current income/expenses/net worth.\n * @param {IncomeObject} incomeObj IncomeObject that contains your predictive properties for income etc.\n * @param {number} age Age at the start of prediction\n * @param {number} growth Assumed growth % as a value from 0-1\n * @returns {{years: number, age: number, incomeObj: IncomeObject}} Years to FIRE and Age at FIRE, along with IncomeObject at 60\n */\nexport const timeToFIRE = (\n    incomeObj: IncomeTaxProfile,\n    age: number,\n    growth: number = 7,\n): { result: IncomeTaxProfile; yearsToFire: number; ageAtFire: number } => {\n    // console.log(\"---------TTF IncomeObj passed: \", incomeObj); //change to income occurs between logs here\n    const reqIncome = preTaxTarget(incomeObj.expenses);\n    // console.log(\"----After PTT:\", incomeObj);\n    const fireNum = fireNumber(reqIncome);\n    const startAge = age;\n\n    let year = 0;\n    // console.log(\"----Before Copy:\", incomeObj);\n    let yearEnd = new IncomeTaxProfile(\n        new NetWorth(\n            incomeObj.netIncome,\n            incomeObj.helpBalance,\n            incomeObj.superBalance,\n            incomeObj.investmentsBalance,\n        ),\n        incomeObj.expenses,\n        incomeObj.superInclusive,\n        incomeObj.superContributionRate,\n        incomeObj.deductions,\n        incomeObj.fringeBenefits,\n        incomeObj.privateHospitalCover,\n    );\n    // console.log(\"-------After Copy:\", yearEnd);\n\n    while (\n        !invTargetReached(yearEnd.investmentsBalance, growth, reqIncome, age)\n    ) {\n        year += 1;\n        age += 1;\n        console.log(\"Before TaxTime:\", yearEnd);\n        const netPosition = taxTime(yearEnd, false, growth, false, true);\n        yearEnd.helpBalance = netPosition.helpBalance;\n        yearEnd.investmentsBalance = netPosition.investmentsBalance;\n        yearEnd.superBalance = netPosition.superBalance;\n        // incomeObj.helpBal = yearEnd.helpBal;\n        // incomeObj.helpBal = yearEnd.superBal;\n        // incomeObj.helpBal = yearEnd.invBal;\n        // console.log(\"----INVESTMENTS:\", yearEnd.investmentsBalance);\n\n        //         console.log(\n        //             `Age: ${age}\n        // Investments Balance: ${yearEnd.investmentsBalance}\n        // Super Balance: ${yearEnd.superBalance}\n        // HECS Balance: ${yearEnd.helpBalance}\n        // Invested this year: ${netPosition.availableToInvest}\n\n        // `,\n        //         );\n    }\n\n    //     console.log(`Investments will reach target balance at age ${age}.\n    // Start max super contributions.`);\n    const superFIRE = superTarget(\n        yearEnd.superBalance,\n        yearEnd.expenses,\n        27500,\n        age,\n        growth,\n    );\n\n    while (age < superFIRE.age + 1) {\n        year += 1;\n        age += 1;\n\n        const netPosition = taxTime(yearEnd, true, growth, false, true);\n        yearEnd.helpBalance = netPosition.helpBalance;\n        yearEnd.superBalance = netPosition.superBalance;\n        yearEnd.investmentsBalance = netPosition.investmentsBalance;\n\n        //         console.log(\n        //             `Age: ${age}\n        // Investments Balance: ${yearEnd.investmentsBalance}\n        // Super Balance: ${yearEnd.superBalance}\n        // HECS Balance: ${yearEnd.helpBalance}\n        // Invested this year: ${netPosition.availableToInvest}\n\n        // `,\n        //         );\n    }\n\n    const fireYears = year;\n    // console.log(`You will reach FIRE in ${year} years!`);\n\n    yearEnd.netIncome = reqIncome;\n    yearEnd.deductions = 0;\n    yearEnd.fringeBenefits = 0;\n    yearEnd.superInclusive = false;\n    yearEnd.superContributionRate = 0;\n\n    while (age < 60) {\n        year += 1;\n        age += 1;\n\n        const netPosition = taxTime(yearEnd, false, growth, true, false);\n        yearEnd.helpBalance = netPosition.helpBalance;\n        yearEnd.superBalance = netPosition.superBalance;\n        yearEnd.investmentsBalance = netPosition.investmentsBalance;\n\n        //         console.log(\n        //             `Age: ${age}\n        // Investments Balance: ${yearEnd.investmentsBalance}\n        // Super Balance: ${yearEnd.superBalance}\n        // HECS Balance: ${yearEnd.helpBalance}\n        // Invested this year: ${netPosition.availableToInvest}\n\n        // `,\n        //         );\n\n        //         console.log(\n        //             `Final Net Worth: ${\n        //                 yearEnd.investmentsBalance + yearEnd.superBalance\n        //             }`,\n        //         );\n    }\n\n    return {\n        yearsToFire: fireYears,\n        ageAtFire: startAge + fireYears,\n        result: yearEnd,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}